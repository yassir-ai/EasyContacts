- name: Drone data dir
  become: yes
  ansible.builtin.file:
    path: /var/lib/drone
    state: directory

- name: Install drone server
  become: yes
  community.general.docker_swarm_service:
    name: drone_server
    image: "drone/drone:2"
    force_update: true
    update_config:
      order: stop-first
    mounts:
      - source: /var/lib/drone
        target: /data
    labels:
      traefik.http.routers.drone.entrypoints: "https"
      traefik.http.routers.drone.rule: "Host(`{{ drone_domain}}`)"
      traefik.http.services.drone.loadbalancer.server.port: "80"
      traefik.http.routers.drone.tls.certresolver: "acme"
    env:
      - DRONE_GITHUB_CLIENT_ID={{ drone_github_client_id }}
      - DRONE_GITHUB_CLIENT_SECRET={{ drone_github_client_secret }}
      - DRONE_RPC_SECRET={{ drone_rpc_secret }}
      - DRONE_SERVER_HOST={{ drone_domain }}
      - DRONE_SERVER_PROTO=https
      - DRONE_USER_CREATE=username:claudusd,admin:true
      - DRONE_USER_FILTER=claudusd
      - DRONE_REPOSITORY_FILTER=claudusd-edu
    networks:
      - traefik
    placement:
      constraints:
        - "node.role==manager"

- name: Install drone runner
  become: yes
  community.general.docker_swarm_service:
    name: drone_runner
    image: "drone/drone-runner-docker:1"
    force_update: true
    update_config:
      order: stop-first
    mounts:
      - source: /var/run/docker.sock
        target: /var/run/docker.sock
    env:
      - DRONE_LOGS_DEBUG=true
      - DRONE_RPC_PROTO=https
      - DRONE_RPC_HOST={{ drone_domain }}
      - DRONE_RPC_SECRET={{ drone_rpc_secret }}
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_RPC_SKIP_VERIFY=true
    mode: global
    placement:
      constraints:
        - "node.role==worker"